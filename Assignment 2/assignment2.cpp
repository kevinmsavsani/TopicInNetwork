#include <bits/stdc++.h>

using namespace std;

int main(int argc, char** argv) 
{ 
	int N = 8;
	int B = 4;
	double p = 0.5;
	int T = 10000;
	double K = 0.6 * N;
	string queue = "INQ";
  
    for (int i = 0; i < argc; ++i) {
    	if (strcmp("-N",argv[i])==0)
    	{
    		cout << argv[i++] << argv[i] << endl;
    		N = atoi(argv[i]);
    	} else if (strcmp("-B",argv[i])==0)
    	{
    		cout << argv[i++] << argv[i] << endl;
    		B = atoi(argv[i]);
    	} else if (strcmp("-p",argv[i])==0)
    	{
    		cout << argv[i++] << argv[i] << endl;
    		p = atof(argv[i]);
    	} else if (strcmp("-queue",argv[i])==0)
    	{
    		cout << argv[i++] << argv[i] << endl;
    		queue = argv[i];
    	} else if (strcmp("-K",argv[i])==0)
    	{
    		cout << argv[i++] << argv[i] << endl;
    		K = atof(argv[i]);
    	} else if (strcmp("-out",argv[i])==0)
    	{
    		cout << argv[i++] << argv[i] << endl;
    	} else if (strcmp("-T",argv[i])==0)
    	{
    		cout << argv[i++] << argv[i] << endl;
    		T = atoi(argv[i]);
    	}
    }
    // ./routing -N 8 -B 4 -p 0.5 -queue INQ -K 4.8 -out outputfile -T 10000

    vector<vector<pair<int,int>>> inputbuffer( N, vector<pair<int,int>>( B ) );
    //vector<vector<pair<int,int>>> outputbuffer( N, vector<pair<int,int>>( B ) );

    vector<int> inputNum;

	for (int i = 0; i < T; ++i)
	{
		for (int j = 0; j < N; ++j)
		{
			inputNum.clear();
			for (int k = 0; k < N; ++k)
			{
				if(inputbuffer[k][0].second == j){
					inputNum.push_back(k);
				}
			}
			if (inputNum.size() > 0)
			{
				const int range_from  = 0;
					const int range_to    = inputNum.size()-1;
					std::random_device                  rand_dev;  //Will be used to obtain a seed for the random number engine
					std::mt19937                        generator(rand_dev());  //Standard mersenne_twister_engine seeded with rand_dev()
					std::uniform_int_distribution<int>  distr(range_from, range_to);   
					int num = distr(generator);
					cout << inputbuffer[inputNum[num]][0].first << endl;

					vector<pair<int,int>>::iterator it; 

				    it = inputbuffer[inputNum[num]].begin(); 
				    inputbuffer[inputNum[num]].erase(it); 
			}
			inputNum.clear();
		}

		for (int j = 0; j < N; ++j)
		{
			const int range_from  = 0;
			const int range_to    = 999;
			std::random_device                  rand_dev;  //Will be used to obtain a seed for the random number engine
			std::mt19937                        generator(rand_dev());  //Standard mersenne_twister_engine seeded with rand_dev()
			std::uniform_int_distribution<int>  distr(range_from, range_to);   

			if(distr(generator) < range_to*p) {
				const int range_from  = 0;
				const int range_to    = N-1;
				std::random_device                  rand_dev;  //Will be used to obtain a seed for the random number engine
				std::mt19937                        generator(rand_dev());  //Standard mersenne_twister_engine seeded with rand_dev()
				std::uniform_int_distribution<int>  distr(range_from, range_to);   

				inputbuffer[j].push_back( make_pair(i,distr(generator)));     //Use dis to transform the random unsigned int generated by gen into an int in [range_from, range_to]
			}



			
		}
	}

    return 0; 
} 

